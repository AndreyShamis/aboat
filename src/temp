#pragma once
#include <Arduino.h>
#include <vector>
#include <ArduinoJson.h>
#include <MPU9250_asukiaaa.h>
// #include <TinyGPSPlus.h>
#include "gnss_manager.hpp"
#include "battery_monitor.hpp"
#include "voltage_current_sensor.hpp"
#include "fly_sky.hpp"
#include "system_status.hpp"
#include "temp_sensors.hpp"
#include "oil_pump.hpp"
#include "rudder.hpp"
#include "motor_control.hpp"
#include "command_parser.hpp"
#include "Adafruit_INA3221.h"
#include <Preferences.h>
#include <RadioLib.h>
#include <time.h>
#include "FS.h"
#include "SPIFFS.h"
#include "LogInterface.hpp"
#include "lora_comm.hpp"

using namespace ArduinoJson;



class Boat : public LogInterface
{

public:
    MPU9250_asukiaaa mpu;
    FusionAhrs ahrs;
    BatteryMonitor battery;
    VoltageCurrentSensor sensor;
    Adafruit_INA3221 ina3221;
    Adafruit_INA3221 ina3221_low;
    FlySkyReceiver flysky;
    OilPumpController oilPump;
    TempSensorManager temps;
    RudderController rudder{RUDDER};
    MotorEngineControl engine;
    CommandParser parser;
    GNSSManager gnss;
    bool updateStarted = false;
    LoRaComm lora;

    // Boat() : sensor(0x48), gnss(Serial2) {}
    Boat() : sensor(0x48), gnss(Serial2), lora(DEVICE_ID_BOAT, this)
    {
    }

    void setup()
    {
        delay(3); // Задержка для отладки
        addLog("RAM: Free heap: " + String(ESP.getFreeHeap()) + " bytes");
        addLog("Flash: Sketch size:" + String(ESP.getSketchSize()) + " bytes / Free: " + String(ESP.getFreeSketchSpace()) + " bytes");

        addLog("Enabling servo power ,,,,,,,,,,,,,,,");
        pinMode(SERVO_PWR_PIN, OUTPUT);
        digitalWrite(SERVO_PWR_PIN, HIGH); // Включаем питание сервоприводов
        battery.setup();
        gnss.begin();

        addLog("Strarting setup iBUS FlySky...");
        flysky.begin();

        addLog("Starting I2C bus scan...");
        Wire.begin(I2C_SDA, I2C_SCL);
        addLog("Scanning I2C bus...");

        for (uint8_t address = 1; address < 127; ++address)
        {
            Wire.beginTransmission(address);
            if (Wire.endTransmission() == 0)
            {
                addLog("Found I2C device at 0x" + String(address, HEX));
            }
        }

        mpu.setWire(&Wire);
        mpu.beginAccel();
        mpu.beginGyro();
        mpu.beginMag();
        FusionAhrsInitialise(&ahrs);

        addLog("MPU9250 + Madgwick initialized");

        if (!ina3221.begin(0X41, &Wire)) // Инициализация INA3221 на адресе 0x41
        {
            Serial.println("❌ INA3221 not found at address 0x41");
            addLog("INA3221 not found at address 0x41");
        }
        else
        {
            addLog("INA3221 found at address 0x41");
            Serial.println("✅ INA3221 found at address 0x41");
            ina3221.setAveragingMode(INA3221_AVG_16_SAMPLES);
            for (uint8_t i = 0; i < 3; i++)
            {
                ina3221.setShuntResistance(i, 0.1);
            }

            // Set a power valid alert to tell us if ALL channels are between the two
            // limits:
            ina3221.setPowerValidLimits(4.0 /* lower limit */, 18.0 /* upper limit */);
        }
        if (!ina3221_low.begin(0X43, &Wire)) // Инициализация INA3221 на адресе 0x43
        {
            Serial.println("❌ INA3221 LOW not found at address 0x43");
            addLog("INA3221 LOW not found at address 0x43");
        }
        else
        {
            addLog("INA3221v  LOW found at address 0x43");
            Serial.println("✅ INA3221 found at address 0x43");
            ina3221_low.setAveragingMode(INA3221_AVG_16_SAMPLES);
            for (uint8_t i = 0; i < 3; i++)
            {
                ina3221.setShuntResistance(i, 0.1);
            }

            // Set a power valid alert to tell us if ALL channels are between the two
            // limits:
            ina3221_low.setPowerValidLimits(3.2 /* lower limit */, 10.0 /* upper limit */);
        }
        SystemStatus::printResetReason();
        SystemStatus::printWakeupReason();
        SystemStatus::printUptime();
        sensor.begin();
        temps.begin();
        addLog("Dallas sensors initialized");
        oilPump.begin();
        addLog("Oil pump initialized");

        rudder.begin();
        rudder.setTrim(0);
        addLog("Boat finish setup");

        parser.registerCommand("M", [this](const String &arg)
                               {
                                   addLog("[CMD M] Motor power set to: " + arg);
                                   // Преобразуй аргумент в int и делай что хочешь
                                   int power = arg.toInt();
                                   //Serial.printf("Setting motor power to %d\n", power);
                                   // motor.setPower(power);
                                   engine.apply(power, 0); });

        parser.registerCommand("R", [this](const String &arg)
                               {
                                   addLog("[CMD R] Rudder angle set to: " + arg);
                                   int angle = arg.toInt();
                                   //Serial.printf("Setting rudder angle to %d\n", angle);
                                   rudder.setAngle(angle); });

        parser.registerCommand("P", [this](const String &arg)
                               {
                                   addLog("[CMD R] Oil pump set to: " + arg);
                                   int speed = arg.toInt();
                                   oilPump.setSpeed(speed); });

        addLog("Commands registered: M (motor), R (rudder), P (oil pump)");
        addLog("Boat setup completed.");
        addLog("Free heap: " + String(ESP.getFreeHeap()) + " bytes");
        addLog("Free sketch space: " + String(ESP.getFreeSketchSpace()) + " bytes");
        addLog("Sketch size: " + String(ESP.getSketchSize()) + " bytes");
        addLog("Flash chip size: " + String(ESP.getFlashChipSize()) + " bytes");
        addLog("Flash chip speed: " + String(ESP.getFlashChipSpeed()) + " Hz");
        addLog("Chip model: " + String(ESP.getChipModel()));
        addLog("Chip revision: " + String(ESP.getChipRevision()));
        addLog("Chip cores: " + String(ESP.getChipCores()));
        addLog("CPU frequency: " + String(ESP.getCpuFreqMHz()) + " MHz");
        addLog("SDK version: " + String(ESP.getSdkVersion()));
        addLog("MAC address: " + String(ESP.getEfuseMac(), HEX));
        printSPIFFSInfo();
        // listSPIFFSFiles();
        addLog("Boat initialized successfully.");
        // Инициализация LoRa модуля члена класса lora
        if (!lora.begin()) { // <-- ИЗМЕНЕНО: Инициализация lora здесь
            Serial.println("❌ LoRa initialization failed!");
            addLog("LoRa initialization failed!");
        } else {
            Serial.println("✅ LoRa initialized successfully!");
            addLog("LoRa initialized successfully!");
        }
    }

    unsigned long lastSync = 0;

    void keep()
    {
        if (updateStarted)
        {
            addLog("Update in progress, skipping keep() cycle.");
            return;
        }
        battery.prepareForRead();
        gnss.update();
        // engine.checkMotorStateChange(ch1, ch2, ch3, ch4);
        // engine.apply(ch3, ch4);
        //  rudder.update();      in main
        // oilPump.update(motor1Temp, motor2Temp, radiatorTemp);
        battery.readVoltage();
        checkFailsafeTransition();
        static unsigned long lastOilPumpUpdate = 0;
        static unsigned long VuPDATE = 0;

        if (millis() - lastOilPumpUpdate >= BOAT_TMR_OIL_PUMP_UPDATE_TIME)
        {
            lastOilPumpUpdate = millis();

            float tMotorAvg = (temps.get(MOTOR1) + temps.get(MOTOR2)) / 2.0;
            float tRad = temps.get(MOTOR_RAD);
            int percent = 0;

            if (tMotorAvg > 60.0f)
            {
                percent = 0;
                addLog("Oil pump OFF: motor overheat");
            }
            else if (tMotorAvg >= 40.0f)
            {
                percent = map((int)tMotorAvg, 40, 60, 100, 100);
                if (tRad > 50.0f)
                {
                    percent = percent * 0.7;
                    addLog("Oil pump speed reduced due to high radiator temp");
                }
                addLog("Oil pump updated from keep(): " + String(percent) + "%");
            }
            else
            {
                percent = 0;
            }

            oilPump.setSpeed(percent);
        }

        // Показываем системное время раз в 5 секунд
        static unsigned long lastPrint = 0;
        if (millis() - lastPrint > BOAT_TMR_STSTEM_PRINT_TIME)
        {
            lastPrint = millis();
            time_t now = time(nullptr);
            addLog("SYstem time:" + String(now));
        }

        // Синхронизация при первом валидном значении GPS времени
        // if (gnss.gnss.time.isUpdated() && millis() - lastSync > 10000)
        // {
        //     syncTimeFromGPS();
        //     lastSync = millis();
        // }
        // static unsigned long wakeStart = 0;
        // static bool firstRun = true;

        // if (firstRun)
        // {
        //     wakeStart = millis();
        //     firstRun = false;
        //     Serial.println("⏰ Wake cycle started.");
        // }

        // const unsigned long wakeDuration = 3600000;                 // 1 минута
        // const uint64_t sleepDurationUs = 1ULL * 60ULL * 1000000ULL; // 5 минут

        // if (millis() - wakeStart >= wakeDuration)
        // {
        //     if (!flysky.transmitter_on)
        //     {
        //         flysky.powerOff();
        //         sensorsPowerOff();
        //         delay(100); // Даем время на отключение
        //         Serial.println("😴 No transmitter detected. Going to deep sleep for 5 minutes...");
        //         ESP.deepSleep(sleepDurationUs);
        //     }
        //     else
        //     {
        //         Serial.println("📡 Transmitter is active. Stay awake.");
        //         wakeStart = millis(); // сбрасываем цикл, остаёмся бодрствовать
        //     }
        // }
    }

    void printSPIFFSInfo()
    {
        addLog("=== SPIFFS Info ===");

        size_t totalBytes = SPIFFS.totalBytes();
        size_t usedBytes = SPIFFS.usedBytes();
        size_t freeBytes = totalBytes - usedBytes;

        addLog("Total size: " + String(totalBytes / 1024) + " Kbytes");
        addLog("Used size:  " + String(usedBytes / 1024) + " Kbytes");
        addLog("Free size:  " + String(freeBytes / 1024) + " Kbytes");
    }

    void listSPIFFSFiles()
    {
        addLog("=== Files in SPIFFS ===");

        File root = SPIFFS.open("/");
        File file = root.openNextFile();

        if (!file)
        {
            addLog("No files found");
            return;
        }

        while (file)
        {
            addLog(String(file.name()) + " (" + String(file.size()) + " bytes)");
            file = root.openNextFile();
        }
    }

    // void syncTimeFromGPS()
    // {
    //     if (gnss.gnss.date.isValid() && gnss.gnss.time.isValid())
    //     {
    //         struct tm t;
    //         t.tm_year = gnss.gnss.date.year() - 1900;
    //         t.tm_mon = gnss.gnss.date.month() - 1;
    //         t.tm_mday = gnss.gnss.date.day();
    //         t.tm_hour = gnss.gnss.time.hour() + 3; // GMT+3
    //         t.tm_min = gnss.gnss.time.minute();
    //         t.tm_sec = gnss.gnss.time.second();
    //         t.tm_isdst = 0;

    //         time_t timeSinceEpoch = mktime(&t);
    //         struct timeval now = {.tv_sec = timeSinceEpoch};
    //         settimeofday(&now, nullptr);

    //         Serial.println("⏰ System time synced from GPS!");
    //     }
    // }

    String getStatusJson()
    {
        StaticJsonDocument<1768> doc; // Подбери под размер данных

        float v = 0, a = 0;
        sensor.read(v, a);
        doc[F("voltage")] = v;
        doc[F("current")] = a;

        JsonObject temp = doc[F("temperature")].to<JsonObject>(); 
        temp[F("motor1")] = temps.get(MOTOR1);
        temp[F("motor2")] = temps.get(MOTOR2);
        temp[F("radiator")] = temps.get(MOTOR_RAD);
        temp[F("oil")] = temps.get(OIL);
        temp[F("ambient")] = temps.get(ENV);

        FusionQuaternion quat = FusionAhrsGetQuaternion(&ahrs);
        FusionEuler euler = FusionQuaternionToEuler(quat);

        JsonObject imu = doc[F("imu")].to<JsonObject>(); 
        imu[F("roll")] = euler.angle.roll;
        imu[F("pitch")] = euler.angle.pitch;
        imu[F("yaw")] = euler.angle.yaw;

        JsonObject pumpObj = doc[F("oil_pump")].to<JsonObject>();
        oilPump.toJSON(pumpObj);
        JsonObject sysObj = doc[F("system")].to<JsonObject>();
        SystemStatus::toExtendedJSON(sysObj);


        JsonObject rudderObj = doc[F("rudder")].to<JsonObject>();
        rudder.toJSON(rudderObj);

        JsonObject gnssObj = doc[F("gnss")].to<JsonObject>();
        gnss.toJson(gnssObj);

        JsonObject motorObj = doc[F("motor")].to<JsonObject>();
        engine.toJSON(motorObj);

        JsonObject batteryObj = doc[F("battery")].to<JsonObject>();
        battery.toJson(batteryObj);

        JsonObject receiverObj = doc["receiver"].to<JsonObject>();
        flysky.toJson(receiverObj);
        JsonArray inaArray = doc["ina3221"].to<JsonArray>();
        for (uint8_t ch = 0; ch < 3; ch++)
        {
            JsonObject chObj = inaArray.createNestedObject();
            chObj["channel"] = ch + 1;
            chObj["bus"] = ina3221.getBusVoltage(ch);
            chObj["shunt"] = ina3221.getShuntVoltage(ch);
            chObj["current"] = ina3221.getCurrentAmps(ch);
        }

        JsonArray inaLowArray = doc["ina3221_low"].to<JsonArray>();
        for (uint8_t ch = 0; ch < 3; ch++)
        {
            JsonObject chObj = inaLowArray.createNestedObject();
            chObj["channel"] = ch + 1;
            chObj["bus"] = ina3221_low.getBusVoltage(ch);
            chObj["shunt"] = ina3221_low.getShuntVoltage(ch);
            chObj["current"] = ina3221_low.getCurrentAmps(ch);
        }

        JsonArray logs = doc[F("logs")].to<JsonArray>();
        for (const auto &logEntry : logBuffer)
        {
            logs.add(logEntry);
        }

        String result;
        serializeJson(doc, result);
        return result;
    }

    void printStatus()
    {
        // float v = 0, a = 0;
        // sensor.read(v, a);
        // addLog(String("Motor1: ") + temps.get(MOTOR1) + " \t-  Motor 2 " + temps.get(MOTOR2) + " \u00B0C" + String("Radiator: ") + temps.get(MOTOR_RAD) + " \tOil " + temps.get(OIL) + " \u00B0C \tAmbient: " + temps.get(ENV) + " \u00B0C");
        // addLog(String("Battery voltage: ") + battery.getVoltage() + " V \tRaw ADC value: " + battery.getRaw() + " \t" + battery.getMillivolts() + " mV - BEC in V: " + v + " V\tI: " + a + " A");
    }

    void checkFailsafeTransition()
    {
        bool currentState = flysky.transmitter_on;

        if (lastTransmitterState && !currentState && !failsafeTriggered)
        {
            addLog(" ! FAILSAFE detected: switching to fallback mode");
            failsafeTriggered = true;

            // Тут вызывай метод переключения в нужный режим
            // Например:
            enterFailsafeMode();
        }

        if (currentState && failsafeTriggered)
        {
            addLog(" ! Transmitter reconnected");
            failsafeTriggered = false; // если связь восстановилась — можно снова отслеживать потерю
            exitFailsafeMode();
        }

        lastTransmitterState = currentState;
    }

    void enterFailsafeMode()
    {
        addLog(" ! Entering autonomous mode...");
    }

    void exitFailsafeMode()
    {
        addLog(" ! Returning to manual control");
    }

    void addLog(const String &msg)
    {
        Serial.println(msg);
        if (logBuffer.size() >= logCapacity)
        {
            logBuffer.erase(logBuffer.begin());
        }
        logBuffer.push_back(msg);
    }
    String getMotorConfigJson()
    {
        Preferences prefs;
        prefs.begin("boatcfg", true);
        String leftEsc = prefs.getString("l_esc", "uni");
        String leftAddr = prefs.getString("l_addr", "");
        String rightEsc = prefs.getString("r_esc", "uni");
        String rightAddr = prefs.getString("r_addr", "");
        prefs.end();

        StaticJsonDocument<256> doc;
        doc["left"]["esc"] = leftEsc;
        doc["left"]["sensor"] = leftAddr;
        doc["right"]["esc"] = rightEsc;
        doc["right"]["sensor"] = rightAddr;

        String result;
        serializeJson(doc, result);
        return result;
    }

    void setMotorConfigJson(const String &json)
    {
        flysky.stopIBus(); // Останавливаем iBUS, чтобы избежать конфликтов при записи в память
        Preferences prefs;
        Serial.println("Setting motor config from JSON: " + json);
        prefs.begin("boatcfg", false);
        DynamicJsonDocument doc(256);
        deserializeJson(doc, json);
        Serial.println("Disabled putting motor config to preferences");
        prefs.putString("l_esc", doc["left"]["esc"].as<String>());
        prefs.putString("l_addr", doc["left"]["sensor"].as<String>());
        prefs.putString("r_esc", doc["right"]["esc"].as<String>());
        prefs.putString("r_addr", doc["right"]["sensor"].as<String>());
        prefs.end();
        flysky.startIBus(); // Запускаем iBUS снова
        Serial.println("Finish");
    }

    String getMotorTempsJson()
    {
        Preferences prefs;
        prefs.begin("boatcfg", true);
        String leftAddr = prefs.getString("l_addr", "");
        String rightAddr = prefs.getString("r_addr", "");
        prefs.end();

        float leftTemp = temps.getByAddressString(leftAddr);
        float rightTemp = temps.getByAddressString(rightAddr);

        StaticJsonDocument<128> doc;
        doc["left"] = isnan(leftTemp) ? -127.0 : leftTemp;
        doc["right"] = isnan(rightTemp) ? -127.0 : rightTemp;

        String result;
        serializeJson(doc, result);
        return result;
    }

    String getAllSensorAddressesJson()
    {
        StaticJsonDocument<256> doc;
        JsonArray arr = doc.to<JsonArray>();
        for (const auto &addr : temps.getAllAddresses())
        {
            arr.add(addr);
        }
        String result;
        serializeJson(doc, result);
        return result;
    }

    void sensorsPowerOn()
    {
        addLog("Start Sensors powered on");
        pinMode(VextCtrl, OUTPUT);
        digitalWrite(VextCtrl, LOW);
        addLog("Sensors powered on");
    }

    void sensorsPowerOff()
    {
        addLog("Start Sensors powered off");
        pinMode(VextCtrl, OUTPUT);
        digitalWrite(VextCtrl, HIGH);
        addLog("Sensors powered off");
    }

    void setThrottleLimit(int limit)
    {
        int pwmLimit = PWM_MIN;
        if (limit < 1250)
        {
            pwmLimit = PWM_MIN + 0.20 * (PWM_MAX - PWM_MIN); // 20%
        }
        else if (limit < 1750)
        {
            pwmLimit = PWM_MIN + 0.50 * (PWM_MAX - PWM_MIN); // 50%
        }
        else
        {
            pwmLimit = PWM_MIN + 0.80 * (PWM_MAX - PWM_MIN); // 80%
        }

        engine.setLimit(pwmLimit);
    }

private:
    // Приватные члены класса, если нужны
    // Например, для хранения состояния или вспомогательных функций
    bool lastTransmitterState = true; // было ли соединение ранее
    bool failsafeTriggered = false;   // уже обработали событие потери
    static constexpr size_t logCapacity = 90;
    std::vector<String> logBuffer;
};
